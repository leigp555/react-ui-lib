{"version":3,"file":"static/js/6327.d7121b3d.chunk.js","mappings":"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","sources":["eg/CodeShow.tsx","eg/PopoverEg/Intro.tsx","eg/PopoverEg/Demo.tsx","eg/PopoverEg/ApiIntro.tsx","eg/PopoverEg/code.tsx","eg/PopoverEg/index.tsx","eg/translate.tsx"],"sourcesContent":["import React from 'react';\nimport { marked } from 'marked';\nimport hljs from 'highlight.js';\n\n// 配置marked\nmarked.setOptions({\n  highlight(str, lang) {\n    const language = hljs.getLanguage(lang) ? lang : 'plaintext';\n    return hljs.highlight(str, { language }).value;\n  },\n  langPrefix: 'hljs language-',\n  gfm: true\n});\n\ninterface Props {\n  code: string;\n}\n\nexport const CodeShow: React.FC<Props> = ({ code }) => {\n  const render = () => {\n    return marked(code, { breaks: true });\n  };\n  return (\n    <div\n      className=\"showCode\"\n      dangerouslySetInnerHTML={{\n        __html: render()\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { Paragraph, Title, Typography } from '../../lib';\n\nexport const Intro: React.FC = () => {\n  return (\n    <Typography>\n      <Title level={3}>简介</Title>\n      <Paragraph>\n        <p>点击/鼠标移入元素，弹出气泡式的卡片浮层。</p>\n      </Paragraph>\n      <Title level={3}>组件概览</Title>\n      <Paragraph>\n        <ul>\n          <li>Popover: 主要组件</li>\n        </ul>\n      </Paragraph>\n      <Title level={3}>使用场景</Title>\n      <Paragraph>\n        <ul>\n          <li>\n            当目标元素有进一步的描述和相关操作时，可以收纳到卡片中，根据用户的操作行为进行展现。\n          </li>\n        </ul>\n      </Paragraph>\n    </Typography>\n  );\n};\n","import React from 'react';\nimport { Button, Popover } from '../../lib';\n\nexport const Demo: React.FC = () => {\n  const content = (\n    <>\n      <p>Content</p>\n      <p>Content</p>\n    </>\n  );\n  return (\n    <div className=\"Eg\" style={{ alignItems: 'center', padding: '100px 0' }}>\n      <div className=\"showEg\">\n        <Popover position=\"rightTop\" content={content} title=\"Title\" trigger=\"hover\">\n          <Button>rightTop</Button>\n        </Popover>\n        <Popover position=\"rightCenter\" content={content} title=\"Title\" trigger=\"hover\">\n          <Button>rightCenter</Button>\n        </Popover>\n        <Popover position=\"rightBottom\" content={content} title=\"Title\" trigger=\"hover\">\n          <Button>rightBottom</Button>\n        </Popover>\n      </div>\n      <div className=\"showEg\">\n        <Popover position=\"leftTop\" content={content} title=\"Title\" trigger=\"click\">\n          <Button>leftTop</Button>\n        </Popover>\n        <Popover position=\"leftCenter\" content={content} title=\"Title\" trigger=\"click\">\n          <Button>leftCenter</Button>\n        </Popover>\n        <Popover position=\"leftBottom\" content={content} title=\"Title\" trigger=\"click\">\n          <Button>leftBottom</Button>\n        </Popover>\n      </div>\n      <div className=\"showEg\">\n        <Popover position=\"topLeft\" content={content} title=\"Title\" trigger=\"click\">\n          <Button>topLeft</Button>\n        </Popover>\n        <Popover position=\"topCenter\" content={content} title=\"Title\" trigger=\"click\">\n          <Button>topCenter</Button>\n        </Popover>\n        <Popover position=\"topRight\" content={content} title=\"Title\" trigger=\"click\">\n          <Button>topRight</Button>\n        </Popover>\n      </div>\n      <div className=\"showEg\">\n        <Popover position=\"bottomLeft\" content={content} title=\"Title\" trigger=\"click\">\n          <Button>bottomLeft</Button>\n        </Popover>\n        <Popover position=\"bottomCenter\" content={content} title=\"Title\" trigger=\"click\">\n          <Button>bottomCenter</Button>\n        </Popover>\n        <Popover position=\"bottomRight\" content={content} title=\"Title\" trigger=\"click\">\n          <Button>bottomRight</Button>\n        </Popover>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Table } from '../../lib';\nimport { TableData } from '../../lib/Table/Table';\n\nconst dataBody = [\n  {\n    属性: 'position',\n    说明: '提示框出现的位置',\n    类型: `'topLeft'\n  | 'topCenter'\n  | 'topRight'\n  | 'bottomLeft'\n  | 'bottomCenter'\n  | 'bottomRight'\n  | 'leftTop'\n  | 'leftCenter'\n  | 'leftBottom'\n  | 'rightTop'\n  | 'rightCenter'\n  | 'rightBottom'`,\n    默认值: 'topCenter'\n  },\n  { 属性: 'content', 说明: '提示内容', 类型: 'ReactNode', 默认值: '' },\n  { 属性: 'title', 说明: '提示的标题', 类型: 'string', 默认值: '' },\n  { 属性: 'trigger', 说明: '触发条件', 类型: `'hover' | 'click'`, 默认值: 'click' }\n];\nconst data: TableData = {\n  header: ['属性', '说明', '类型', '默认值'],\n  body: dataBody\n};\n\nexport const ApiIntro: React.FC = () => {\n  return (\n    <div className=\"interface\">\n      <Table data={data} />\n    </div>\n  );\n};\n","import { translate } from '../translate';\n\nexport const code = translate(`\nimport { Button, Popover } from 'uix-react';\\n\nexport const App:React.RC=()=>{\n  const content = (\n    <>\n      <p>Content</p>\n      <p>Content</p>\n    </>\n  );\n  return (\n    <div className=\"Eg\" style={{ alignItems: 'center', padding: '100px 0' }}>\n      <div className=\"showEg\">\n        <Popover position=\"rightTop\" content={content} title=\"Title\" trigger=\"hover\">\n          <Button>rightTop</Button>\n        </Popover>\n        <Popover position=\"rightCenter\" content={content} title=\"Title\" trigger=\"hover\">\n          <Button>rightCenter</Button>\n        </Popover>\n        <Popover position=\"rightBottom\" content={content} title=\"Title\" trigger=\"hover\">\n          <Button>rightBottom</Button>\n        </Popover>\n      </div>\n      <div className=\"showEg\">\n        <Popover position=\"leftTop\" content={content} title=\"Title\" trigger=\"click\">\n          <Button>leftTop</Button>\n        </Popover>\n        <Popover position=\"leftCenter\" content={content} title=\"Title\" trigger=\"click\">\n          <Button>leftCenter</Button>\n        </Popover>\n        <Popover position=\"leftBottom\" content={content} title=\"Title\" trigger=\"click\">\n          <Button>leftBottom</Button>\n        </Popover>\n      </div>\n      <div className=\"showEg\">\n        <Popover position=\"topLeft\" content={content} title=\"Title\" trigger=\"click\">\n          <Button>topLeft</Button>\n        </Popover>\n        <Popover position=\"topCenter\" content={content} title=\"Title\" trigger=\"click\">\n          <Button>topCenter</Button>\n        </Popover>\n        <Popover position=\"topRight\" content={content} title=\"Title\" trigger=\"click\">\n          <Button>topRight</Button>\n        </Popover>\n      </div>\n      <div className=\"showEg\">\n        <Popover position=\"bottomLeft\" content={content} title=\"Title\" trigger=\"click\">\n          <Button>bottomLeft</Button>\n        </Popover>\n        <Popover position=\"bottomCenter\" content={content} title=\"Title\" trigger=\"click\">\n          <Button>bottomCenter</Button>\n        </Popover>\n        <Popover position=\"bottomRight\" content={content} title=\"Title\" trigger=\"click\">\n          <Button>bottomRight</Button>\n        </Popover>\n      </div>\n    </div>\n  );\n}\n`);\n","import React from 'react';\nimport { Intro } from './Intro';\nimport { Demo } from './Demo';\nimport { CodeShow } from '../CodeShow';\nimport { ApiIntro } from './ApiIntro';\nimport '../content.scss';\nimport { Title } from '../../lib';\nimport { code } from './code';\n\nconst Example: React.FC = () => {\n  return (\n    <div className=\"content-wrap\">\n      <h2 className=\"title\">Button 按钮</h2>\n      <Intro />\n      <Title level={3}>案例</Title>\n      <Demo />\n      <Title level={3}>代码示例</Title>\n      <CodeShow code={code} />\n      <Title level={3}>接口</Title>\n      <ApiIntro />\n    </div>\n  );\n};\n\nexport default Example;\n","// eslint-disable-next-line no-useless-concat\nexport const translate = (example: string) => '```javascript' + `${example}` + '\\n' + '```';\n"],"names":["marked","highlight","str","lang","language","hljs","value","langPrefix","gfm","CodeShow","code","className","dangerouslySetInnerHTML","__html","breaks","Intro","level","Demo","content","style","alignItems","padding","position","title","trigger","data","header","body","属性","说明","类型","默认值","ApiIntro","translate","example"],"sourceRoot":""}