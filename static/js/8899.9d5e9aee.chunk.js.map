{"version":3,"file":"static/js/8899.9d5e9aee.chunk.js","mappings":"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","sources":["eg/CodeShow.tsx","eg/ListEg/Intro.tsx","lib/List/mock.ts","eg/ListEg/Demo.tsx","eg/ListEg/ApiIntro.tsx","eg/ListEg/code.tsx","eg/ListEg/index.tsx","eg/translate.tsx"],"sourcesContent":["import React from 'react';\nimport { marked } from 'marked';\nimport hljs from 'highlight.js';\n\n// 配置marked\nmarked.setOptions({\n  highlight(str, lang) {\n    const language = hljs.getLanguage(lang) ? lang : 'plaintext';\n    return hljs.highlight(str, { language }).value;\n  },\n  langPrefix: 'hljs language-',\n  gfm: true\n});\n\ninterface Props {\n  code: string;\n}\n\nexport const CodeShow: React.FC<Props> = ({ code }) => {\n  const render = () => {\n    return marked(code, { breaks: true });\n  };\n  return (\n    <div\n      className=\"showCode\"\n      dangerouslySetInnerHTML={{\n        __html: render()\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { Paragraph, Title, Typography } from '../../lib';\n\nexport const Intro: React.FC = () => {\n  return (\n    <Typography>\n      <Title level={3}>简介</Title>\n      <Paragraph>\n        <p>通用列表。</p>\n      </Paragraph>\n      <Title level={3}>组件概览</Title>\n      <Paragraph>\n        <ul>\n          <li>List: 主要组件</li>\n          <li>ListItem: 子组件</li>\n        </ul>\n      </Paragraph>\n      <Title level={3}>使用场景</Title>\n      <Paragraph>\n        <ul>\n          <li>最基础的列表展示，可承载文字、列表、图片、段落，常用于后台数据展示页面。</li>\n        </ul>\n      </Paragraph>\n    </Typography>\n  );\n};\n","export interface UserData {\n  id: number;\n  avatar: string;\n  title: string;\n  description: string;\n}\n\n// 伪造数据接口不用看\nconst createUserData = (total: number) => {\n  const dataSrc: UserData[] = [];\n  for (let i = 0; i < total; i++) {\n    dataSrc.push({\n      id: i,\n      avatar: 'https://joeschmoe.io/api/v1/random',\n      title: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit.',\n      description: `Accusantium ad ducimus eos et\n      exercitationem facilis itaque molestias necessitatibus odio, quod ratione rem similique\n      voluptatum? Distinctio ipsam nostrum nulla quibusdam sed.`\n    });\n  }\n  return dataSrc;\n};\n// 伪造数据接口不用看\n// 模拟一些数据\nconst dataSrc1 = createUserData(10);\nconst dataSrc2 = createUserData(1000);\n// 伪造数据接口不用看\n// 模拟数据请求\nexport const ajax = (\n  url: string,\n  offset: number,\n  limit: number\n): Promise<{ status: number; data: UserData[]; total: number }> => {\n  return new Promise((resolve) => {\n    if (url === '/loadmore') {\n      setTimeout(() => {\n        resolve({\n          status: 200,\n          data: dataSrc1.slice(offset, offset + limit),\n          total: dataSrc1.length\n        });\n      }, 1000);\n    } else if (url === '/paginate') {\n      setTimeout(() => {\n        resolve({\n          status: 200,\n          data: dataSrc2.slice(offset, offset + limit),\n          total: dataSrc2.length\n        });\n      }, 1000);\n    }\n  });\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Avatar, Button, List, ListItem } from '../../lib';\nimport { ajax, UserData } from '../../lib/List/mock';\n\nexport const Demo: React.FC = () => {\n  // 按钮式加载更多\n  const [data, setData] = useState<UserData[]>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [isLoadFinish, setLoadFinish] = useState(false);\n  // 分页式加载更多\n  const [data2, setData2] = useState<UserData[]>([]);\n  const [totalData, setTotalData] = useState<number>(0);\n  const [isLoading2, setLoading2] = useState(false);\n  const [isLoadFinish2, setLoadFinish2] = useState(false);\n\n  // 初始化数据\n  useEffect(() => {\n    // 按钮时加载初始化数据\n    setLoading(true);\n    ajax('/loadmore', 0, 5).then((res) => {\n      setLoading(false);\n      setData((state) => {\n        return [...state, ...res.data];\n      });\n    });\n    // 分页式加载初始化数据\n    setLoading2(true);\n    ajax('/paginate', 0, 5).then((res) => {\n      setLoading2(false);\n      setTotalData(res.total);\n      setData2((state) => {\n        return [...state, ...res.data];\n      });\n    });\n  }, []);\n  // 加载更多回调函数\n  const loadMore = useCallback(() => {\n    setLoading(true);\n    ajax('/loadmore', data.length, 5).then((res) => {\n      setLoading(false);\n      if (res.data[0]) {\n        setData((state) => {\n          return [...state, ...res.data];\n        });\n      } else {\n        setLoadFinish(true);\n      }\n    });\n  }, [isLoading]);\n  // 分页的函数回调\n  const paginateMore = useCallback((start: number) => {\n    setLoading2(true);\n    ajax('/paginate', start, 5).then((res) => {\n      setLoading2(false);\n      if (res.data[0]) {\n        setData2(() => {\n          return [...res.data];\n        });\n      } else {\n        setLoadFinish2(true);\n      }\n    });\n  }, []);\n  return (\n    <div className=\"Eg\">\n      <List\n        model=\"pagination\"\n        perPage={5} // 这个数据根据每次请求多少条数据来,不能瞎写不然分页数会乱\n        totalData={totalData}\n        paginateCallback={paginateMore}\n        data={data2}\n        isLoading={isLoading2}\n        isLoadFinish={isLoadFinish2}\n        renderItem={(item: UserData) => (\n          <ListItem\n            key={`${Math.random() + item.id}`}\n            avatar={<Avatar src={item.avatar} size={32} />}\n            title={<span>{item.title}</span>}\n            description={item.description}\n            actions={\n              <>\n                <Button radius onClick={() => console.log('item id', item.id)}>\n                  编辑\n                </Button>\n                <Button radius onClick={() => console.log('item id', item.id)}>\n                  查看\n                </Button>\n              </>\n            }\n          />\n        )}\n      />\n      <List\n        model=\"loadMore\"\n        data={data}\n        loadMoreCallback={loadMore}\n        isLoading={isLoading}\n        isLoadFinish={isLoadFinish}\n        renderItem={(item: UserData) => (\n          <ListItem\n            key={`${Math.random() + item.id}`}\n            avatar={<Avatar src={item.avatar} size={32} />}\n            title={<span>{item.title}</span>}\n            description={item.description}\n            actions={\n              <>\n                <Button radius onClick={() => console.log('item id', item.id)}>\n                  编辑\n                </Button>\n                <Button radius onClick={() => console.log('item id', item.id)}>\n                  查看\n                </Button>\n              </>\n            }\n          />\n        )}\n      />\n      <List\n        model=\"normal\"\n        data={data}\n        loadMoreCallback={loadMore}\n        isLoading={isLoading}\n        isLoadFinish={isLoadFinish}\n        renderItem={(item: UserData) => (\n          <ListItem\n            key={`${Math.random() + item.id}`}\n            avatar={<Avatar src={item.avatar} size={32} />}\n            title={<span>{item.title}</span>}\n            description={item.description}\n            actions={\n              <>\n                <Button radius onClick={() => console.log('item id', item.id)}>\n                  编辑\n                </Button>\n                <Button radius onClick={() => console.log('item id', item.id)}>\n                  查看\n                </Button>\n              </>\n            }\n          />\n        )}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Table } from '../../lib';\nimport { TableData } from '../../lib/Table/Table';\n\nconst dataBody = [\n  { 姓名: '张三', 年龄: 1, 班级: 335, 身高: 175 },\n  { 姓名: '张三', 年龄: 2, 班级: 335, 身高: 175 }\n];\nconst data: TableData = {\n  header: ['属性', '说明', '类型', '默认值'],\n  body: dataBody\n};\n\nexport const ApiIntro: React.FC = () => {\n  return (\n    <div className=\"interface\">\n      <Table data={data} />\n    </div>\n  );\n};\n","import { translate } from '../translate';\n\nconst item = { id: 0 };\n\nexport const code = translate(`\nimport { Avatar, Button, List, ListItem  } from 'uix-react';\\n\nexport const App:React.RC=()=>{\nexport const Demo: React.FC = () => {\n  // 按钮式加载更多\n  const [data, setData] = useState<UserData[]>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [isLoadFinish, setLoadFinish] = useState(false);\n  // 分页式加载更多\n  const [data2, setData2] = useState<UserData[]>([]);\n  const [totalData, setTotalData] = useState<number>(0);\n  const [isLoading2, setLoading2] = useState(false);\n  const [isLoadFinish2, setLoadFinish2] = useState(false);\n\n  // 初始化数据\n  useEffect(() => {\n    // 按钮时加载初始化数据\n    setLoading(true);\n    ajax('/loadmore', 0, 5).then((res) => {\n      setLoading(false);\n      setData((state) => {\n        return [...state, ...res.data];\n      });\n    });\n    // 分页式加载初始化数据\n    setLoading2(true);\n    ajax('/paginate', 0, 5).then((res) => {\n      setLoading2(false);\n      setTotalData(res.total);\n      setData2((state) => {\n        return [...state, ...res.data];\n      });\n    });\n  }, []);\n  // 加载更多回调函数\n  const loadMore = useCallback(() => {\n    setLoading(true);\n    ajax('/loadmore', data.length, 5).then((res) => {\n      setLoading(false);\n      if (res.data[0]) {\n        setData((state) => {\n          return [...state, ...res.data];\n        });\n      } else {\n        setLoadFinish(true);\n      }\n    });\n  }, [isLoading]);\n  // 分页的函数回调\n  const paginateMore = useCallback((start: number) => {\n    setLoading2(true);\n    ajax('/paginate', start, 5).then((res) => {\n      setLoading2(false);\n      if (res.data[0]) {\n        setData2(() => {\n          return [...res.data];\n        });\n      } else {\n        setLoadFinish2(true);\n      }\n    });\n  }, []);\n  return (\n    <div className=\"Eg\">\n      <List\n        model=\"pagination\"\n        perPage={5} // 这个数据根据每次请求多少条数据来,不能瞎写不然分页数会乱\n        totalData={totalData}\n        paginateCallback={paginateMore}\n        data={data2}\n        isLoading={isLoading2}\n        isLoadFinish={isLoadFinish2}\n        renderItem={(item: UserData) => (\n          <ListItem\n            key={\\`${Math.random() + item.id}\\`}\n            avatar={<Avatar src={item.avatar} size={32} />}\n            title={<span>{item.title}</span>}\n            description={item.description}\n            actions={\n              <>\n                <Button radius onClick={() => console.log('item id', item.id)}>\n                  编辑\n                </Button>\n                <Button radius onClick={() => console.log('item id', item.id)}>\n                  查看\n                </Button>\n              </>\n            }\n          />\n        )}\n      />\n      <List\n        model=\"loadMore\"\n        data={data}\n        loadMoreCallback={loadMore}\n        isLoading={isLoading}\n        isLoadFinish={isLoadFinish}\n        renderItem={(item: UserData) => (\n          <ListItem\n            key={\\`${Math.random() + item.id}\\`}\n            avatar={<Avatar src={item.avatar} size={32} />}\n            title={<span>{item.title}</span>}\n            description={item.description}\n            actions={\n              <>\n                <Button radius onClick={() => console.log('item id', item.id)}>\n                  编辑\n                </Button>\n                <Button radius onClick={() => console.log('item id', item.id)}>\n                  查看\n                </Button>\n              </>\n            }\n          />\n        )}\n      />\n      <List\n        model=\"normal\"\n        data={data}\n        loadMoreCallback={loadMore}\n        isLoading={isLoading}\n        isLoadFinish={isLoadFinish}\n        renderItem={(item: UserData) => (\n          <ListItem\n            key={\\`${Math.random() + item.id}\\`}\n            avatar={<Avatar src={item.avatar} size={32} />}\n            title={<span>{item.title}</span>}\n            description={item.description}\n            actions={\n              <>\n                <Button radius onClick={() => console.log('item id', item.id)}>\n                  编辑\n                </Button>\n                <Button radius onClick={() => console.log('item id', item.id)}>\n                  查看\n                </Button>\n              </>\n            }\n          />\n        )}\n      />\n    </div>\n  );\n}\n`);\n","import React from 'react';\nimport { Intro } from './Intro';\nimport { Demo } from './Demo';\nimport { CodeShow } from '../CodeShow';\nimport { ApiIntro } from './ApiIntro';\nimport '../content.scss';\nimport { Title } from '../../lib';\nimport { code } from './code';\n\nconst Example: React.FC = () => {\n  return (\n    <div className=\"content-wrap\">\n      <h2 className=\"title\">List 列表</h2>\n      <Intro />\n      <Title level={3}>案例</Title>\n      <Demo />\n      <Title level={3}>代码示例</Title>\n      <CodeShow code={code} />\n      <Title level={3}>接口</Title>\n      <ApiIntro />\n    </div>\n  );\n};\n\nexport default Example;\n","// eslint-disable-next-line no-useless-concat\nexport const translate = (example: string) => '```javascript' + `${example}` + '\\n' + '```';\n"],"names":["marked","highlight","str","lang","language","hljs","value","langPrefix","gfm","CodeShow","code","className","dangerouslySetInnerHTML","__html","breaks","Intro","level","createUserData","total","dataSrc","i","push","id","avatar","title","description","dataSrc1","dataSrc2","ajax","url","offset","limit","Promise","resolve","setTimeout","status","data","slice","length","Demo","useState","setData","isLoading","setLoading","isLoadFinish","setLoadFinish","data2","setData2","totalData","setTotalData","isLoading2","setLoading2","isLoadFinish2","setLoadFinish2","useEffect","then","res","state","loadMore","useCallback","paginateMore","start","model","perPage","paginateCallback","renderItem","item","src","size","actions","radius","onClick","console","log","Math","random","loadMoreCallback","header","body","姓名","年龄","班级","身高","ApiIntro","translate","example"],"sourceRoot":""}