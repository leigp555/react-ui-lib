{"version":3,"file":"static/js/4993.01cd8ad1.chunk.js","mappings":"qLAKAA,EAAAA,GAAAA,WAAkB,CAChBC,UADgB,SACNC,EAAKC,GACb,IAAMC,EAAWC,EAAAA,EAAAA,YAAiBF,GAAQA,EAAO,YACjD,OAAOE,EAAAA,EAAAA,UAAeH,EAAK,CAAEE,SAAAA,IAAYE,KAC1C,EACDC,WAAY,iBACZC,KAAK,IAOA,IAAMC,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAI1C,OACE,gBACEC,UAAU,WACVC,wBAAyB,CACvBC,QANGb,EAAAA,EAAAA,IAAOU,EAAM,CAAEI,QAAQ,MAUjC,C,mGC3BYC,EAAkB,WAC7B,OACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOC,MAAO,EAAd,2BACA,SAAC,KAAD,WACE,2FAEF,SAAC,KAAD,CAAOA,MAAO,EAAd,uCACA,SAAC,KAAD,WACE,yBACE,oEAGJ,SAAC,KAAD,CAAOA,MAAO,EAAd,uCACA,UAAC,KAAD,YACE,6NACA,2BACE,uOACA,2IAKT,ECvBYC,EAAiB,WAC5B,OACE,iBAAKN,UAAU,KAAf,WACE,SAAC,KAAD,CAAUO,QAAS,GAAIC,MAAO,CAAEC,OAAQ,OAAQC,MAAO,YACvD,SAAC,KAAD,CAAUH,QAAS,GAAII,YAAY,SAASC,YAAY,WACxD,SAAC,KAAD,CAAUC,KAAK,SAASN,QAAS,GAAII,YAAY,MAAMC,YAAY,WACnE,SAAC,KAAD,CACEC,KAAK,SACLN,QAAS,GACTI,YAAY,MACZC,YAAY,QACZE,OAAQ,SAACP,GAAD,gBAAgBA,EAAhB,cAIf,E,UCLKQ,EAAkB,CACtBC,OAAQ,CAAC,eAAM,eAAM,eAAM,sBAC3BC,KAXe,CACf,CAAEC,eAAI,UAAWC,eAAI,2BAAQC,eAAI,SAAUC,qBAAK,IAChD,CAAEH,eAAI,cAAeC,eAAI,6CAAWC,eAAI,SAAUC,qBAAK,WACvD,CAAEH,eAAI,cAAeC,eAAI,mDAAYC,eAAI,SAAUC,qBAAK,WACxD,CAAEH,eAAI,SAAUC,eAAI,qBAAOC,eAAI,0BAA2BC,qBAAK,IAC/D,CAAEH,eAAI,OAAQC,eAAI,qEAAeC,eAAG,oBAAsBC,qBAAK,QAC/D,CAAEH,eAAI,MAAOC,eAAI,yDAAaC,eAAI,UAAWC,qBAAK,SAClD,CAAEH,eAAI,YAAaC,eAAI,2BAAQC,eAAI,UAAWC,qBAAK,WAOxCC,EAAqB,WAChC,OACE,gBAAKtB,UAAU,YAAf,UACE,SAAC,KAAD,CAAOe,KAAMA,KAGlB,ECrBYhB,G,SAAOwB,E,QAAAA,GAAU,0fAAD,OADb,GACa,8CCqB7B,EAf0B,WACxB,OACE,iBAAKvB,UAAU,eAAf,WACE,eAAIA,UAAU,QAAd,0CACA,SAACI,EAAD,KACA,SAAC,KAAD,CAAOC,MAAO,EAAd,2BACA,SAACC,EAAD,KACA,SAAC,KAAD,CAAOD,MAAO,EAAd,uCACA,SAACP,EAAA,EAAD,CAAUC,KAAMA,KAChB,SAAC,KAAD,CAAOM,MAAO,EAAd,2BACA,SAACiB,EAAD,MAGL,C,uDCrBM,IAAMC,EAAY,SAACC,GAAD,MAAqB,0BAAqBA,GAArB,OAArB,C","sources":["eg/CodeShow.tsx","eg/ProgressEg/Intro.tsx","eg/ProgressEg/Demo.tsx","eg/ProgressEg/ApiIntro.tsx","eg/ProgressEg/code.tsx","eg/ProgressEg/index.tsx","eg/translate.tsx"],"sourcesContent":["import React from 'react';\nimport { marked } from 'marked';\nimport hljs from 'highlight.js';\n\n// 配置marked\nmarked.setOptions({\n  highlight(str, lang) {\n    const language = hljs.getLanguage(lang) ? lang : 'plaintext';\n    return hljs.highlight(str, { language }).value;\n  },\n  langPrefix: 'hljs language-',\n  gfm: true\n});\n\ninterface Props {\n  code: string;\n}\n\nexport const CodeShow: React.FC<Props> = ({ code }) => {\n  const render = () => {\n    return marked(code, { breaks: true });\n  };\n  return (\n    <div\n      className=\"showCode\"\n      dangerouslySetInnerHTML={{\n        __html: render()\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { Paragraph, Title, Typography } from '../../lib';\n\nexport const Intro: React.FC = () => {\n  return (\n    <Typography>\n      <Title level={3}>简介</Title>\n      <Paragraph>\n        <p>展示操作的当前进度。</p>\n      </Paragraph>\n      <Title level={3}>组件概览</Title>\n      <Paragraph>\n        <ul>\n          <li>Progress: 主要组件</li>\n        </ul>\n      </Paragraph>\n      <Title level={3}>使用场景</Title>\n      <Paragraph>\n        <p>在操作需要较长时间才能完成时，为用户显示该操作的当前进度和状态。</p>\n        <ul>\n          <li>当一个操作会打断当前界面，或者需要在后台运行，且耗时可能超过 2 秒时；</li>\n          <li>当需要显示一个操作完成的百分比时。</li>\n        </ul>\n      </Paragraph>\n    </Typography>\n  );\n};\n","import React from 'react';\nimport { Progress } from '../../lib';\n\nexport const Demo: React.FC = () => {\n  return (\n    <div className=\"Eg\">\n      <Progress percent={40} style={{ height: '10px', width: '300px' }} />\n      <Progress percent={60} finishColor=\"orange\" undoneColor=\"green\" />\n      <Progress type=\"circle\" percent={60} finishColor=\"red\" undoneColor=\"green\" />\n      <Progress\n        type=\"circle\"\n        percent={20}\n        finishColor=\"red\"\n        undoneColor=\"green\"\n        format={(percent) => `${percent} Days`}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Table } from '../../lib';\nimport { TableData } from '../../lib/Table/Table';\n\nconst dataBody = [\n  { 属性: 'percent', 说明: '默认进度', 类型: 'number', 默认值: '' },\n  { 属性: 'finishColor', 说明: '完成状态的颜色', 类型: 'string', 默认值: '#1890ff' },\n  { 属性: 'undoneColor', 说明: '未完成状态的颜色', 类型: 'string', 默认值: '#52c41a' },\n  { 属性: 'format', 说明: '格式化', 类型: '(num: number) => string', 默认值: '' },\n  { 属性: 'type', 说明: '圆形进度条或线型进度条', 类型: `'line' | 'circle'`, 默认值: 'line' },\n  { 属性: 'dot', 说明: '完成进度条末尾圆点', 类型: 'boolean', 默认值: 'false' },\n  { 属性: 'statistic', 说明: '进度统计', 类型: 'boolean', 默认值: 'false' }\n];\nconst data: TableData = {\n  header: ['属性', '说明', '类型', '默认值'],\n  body: dataBody\n};\n\nexport const ApiIntro: React.FC = () => {\n  return (\n    <div className=\"interface\">\n      <Table data={data} />\n    </div>\n  );\n};\n","import { translate } from '../translate';\n\nconst percent = 50;\nexport const code = translate(`\nimport { Progress } from 'uix-react';\\n\nexport const App:React.RC=()=>{\n  return (\n    <div className=\"Eg\">\n      <Progress percent={40} style={{ height: '10px', width: '300px' }} />\n      <Progress percent={60} finishColor=\"orange\" undoneColor=\"green\" />\n      <Progress type=\"circle\" percent={60} finishColor=\"red\" undoneColor=\"green\" />\n      <Progress\n        type=\"circle\"\n        percent={20}\n        finishColor=\"red\"\n        undoneColor=\"green\"\n        format={(percent) => \\`${percent} Days\\`}\n      />\n    </div>\n  );\n}\n`);\n","import React from 'react';\nimport { Intro } from './Intro';\nimport { Demo } from './Demo';\nimport { CodeShow } from '../CodeShow';\nimport { ApiIntro } from './ApiIntro';\nimport '../content.scss';\nimport { Title } from '../../lib';\nimport { code } from './code';\n\nconst Example: React.FC = () => {\n  return (\n    <div className=\"content-wrap\">\n      <h2 className=\"title\">Progress 进度条</h2>\n      <Intro />\n      <Title level={3}>案例</Title>\n      <Demo />\n      <Title level={3}>代码示例</Title>\n      <CodeShow code={code} />\n      <Title level={3}>接口</Title>\n      <ApiIntro />\n    </div>\n  );\n};\n\nexport default Example;\n","// eslint-disable-next-line no-useless-concat\nexport const translate = (example: string) => '```javascript' + `${example}` + '\\n' + '```';\n"],"names":["marked","highlight","str","lang","language","hljs","value","langPrefix","gfm","CodeShow","code","className","dangerouslySetInnerHTML","__html","breaks","Intro","level","Demo","percent","style","height","width","finishColor","undoneColor","type","format","data","header","body","属性","说明","类型","默认值","ApiIntro","translate","example"],"sourceRoot":""}