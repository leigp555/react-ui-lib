{"version":3,"file":"static/js/4986.e769eb49.chunk.js","mappings":"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","sources":["eg/CodeShow.tsx","eg/TableEg/Intro.tsx","eg/TableEg/Demo.tsx","eg/TableEg/ApiIntro.tsx","eg/TableEg/code.tsx","eg/TableEg/index.tsx","eg/translate.tsx"],"sourcesContent":["import React from 'react';\nimport { marked } from 'marked';\nimport hljs from 'highlight.js';\n\n// 配置marked\nmarked.setOptions({\n  highlight(str, lang) {\n    const language = hljs.getLanguage(lang) ? lang : 'plaintext';\n    return hljs.highlight(str, { language }).value;\n  },\n  langPrefix: 'hljs language-',\n  gfm: true\n});\n\ninterface Props {\n  code: string;\n}\n\nexport const CodeShow: React.FC<Props> = ({ code }) => {\n  const render = () => {\n    return marked(code, { breaks: true });\n  };\n  return (\n    <div\n      className=\"showCode\"\n      dangerouslySetInnerHTML={{\n        __html: render()\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { Paragraph, Title, Typography } from '../../lib';\n\nexport const Intro: React.FC = () => {\n  return (\n    <Typography>\n      <Title level={3}>简介</Title>\n      <Paragraph>\n        <p>展示行列数据。</p>\n      </Paragraph>\n      <Title level={3}>组件概览</Title>\n      <Paragraph>\n        <ul>\n          <li>AsyncTable: 主要组件</li>\n          <li>Table: 主要组件</li>\n        </ul>\n      </Paragraph>\n      <Title level={3}>使用场景</Title>\n      <Paragraph>\n        <ul>\n          <li>当有大量结构化的数据需要展现时；</li>\n          <li>当需要对数据进行排序、搜索、分页、自定义操作等复杂行为时。</li>\n        </ul>\n      </Paragraph>\n    </Typography>\n  );\n};\n","import React, { useState } from 'react';\nimport { AsyncTable, Table, Tag } from '../../lib';\nimport { TableData } from '../../lib/Table/Table';\n\nconst dataBody = [\n  { 姓名: '张三', 年龄: 1, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 2, 班级: 335, 身高: 175, 体重: '' },\n  { 姓名: '张三', 年龄: <Tag color=\"red\">999</Tag>, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 4, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 5, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: <Tag color=\"yellow\">777</Tag>, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 7, 班级: 335, 身高: <Tag color=\"green\">体重</Tag>, 体重: 99 },\n  { 姓名: '张三', 年龄: 8, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 9, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 10, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 11, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 12, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 13, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 14, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 15, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 16, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 17, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 18, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 19, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 20, 班级: 335, 身高: 175, 体重: 99 }\n];\nconst createData = () => {\n  const data = [];\n  for (let i = 0; i < 10000; i++) {\n    data.push({ 姓名: '李四', 年龄: i, 班级: 400, 身高: 175, 体重: 99 });\n  }\n  return data;\n};\nconst data: TableData = {\n  header: ['姓名', '年龄', '班级', '身高', '体重'],\n  body: dataBody,\n  footer: { title: '总计', result: dataBody.length.toString() }\n};\nconst data2: TableData = {\n  header: ['姓名', '年龄', '班级', '身高', '体重'],\n  body: dataBody\n};\nconst data3: TableData = {\n  header: ['姓名', '年龄', '班级', '身高', '体重'],\n  body: createData(),\n  footer: { title: '总计', result: `${createData().length.toString()} 条数据` }\n};\n\nconst allData = createData();\n// 模拟数据请求\nconst ajax = (url: string, offset: number, limit: number) => {\n  return new Promise((resolve) => {\n    if (url === '/data') {\n      setTimeout(() => {\n        resolve({\n          status: 200,\n          data: allData.slice(offset, offset + limit),\n          total: allData.length\n        });\n      }, 500);\n    }\n  });\n};\n\nexport const Demo: React.FC = () => {\n  // 总条数\n  const [totalSrc, setTotalData] = useState<number>(0);\n  // 是否加载\n  const [isLoading, setLoading] = useState<boolean>(true);\n  // 数据源\n  const [dataSrc, setData] = useState<TableData>({\n    header: ['姓名', '年龄', '班级', '身高', '体重'],\n    body: [],\n    footer: {\n      title: '总计',\n      result: '0'\n    }\n  });\n  // 函数每次翻页都会执行\n  const fn = (currentPage: number, offset: number) => {\n    setLoading(true);\n    (\n      ajax('/data', offset, 10) as Promise<{\n        status: number;\n        data: { [key: string]: React.ReactNode }[];\n        total: number;\n      }>\n    ).then((res) => {\n      setData((state) => ({\n        ...state,\n        body: res.data,\n        footer: {\n          ...state.footer,\n          result: `${res.total.toString()} 条数据`\n        }\n      }));\n      setTotalData(res.total);\n      setLoading(false);\n    });\n  };\n  return (\n    <div className=\"Eg\">\n      <Table data={data} pagination statistic />\n      <Table data={data2} />\n      <Table data={data3} pagination goTool moreTool statistic perPage={10} />\n      <AsyncTable\n        loading={isLoading}\n        callback={fn}\n        currentData={dataSrc}\n        totalData={totalSrc}\n        perPage={10} // 与上面的limit一样\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Table, Title } from '../../lib';\nimport { TableData } from '../../lib/Table/Table';\n\nconst TextBody = [\n  { 属性: 'data', 说明: '数据', 类型: 'TableData', 默认值: '' },\n  { 属性: 'pagination', 说明: '是否分页展示', 类型: 'boolean', 默认值: 'false' },\n  { 属性: 'moreTool', 说明: '展示快速翻页', 类型: 'boolean', 默认值: 'false' },\n  { 属性: 'goTool', 说明: '允许输入页码', 类型: 'boolean', 默认值: 'false' },\n  { 属性: 'statistic', 说明: '数据统计', 类型: 'boolean', 默认值: 'false' },\n  { 属性: 'perPage', 说明: '每页展示多少条数据', 类型: 'number', 默认值: '10' }\n];\nconst TextData: TableData = {\n  header: ['属性', '说明', '类型', '默认值'],\n  body: TextBody\n};\n\nconst TitleBody = [\n  { 属性: 'currentData', 说明: 'table数据', 类型: 'TableData', 默认值: '' },\n  {\n    属性: 'callback',\n    说明: '翻页的回调函数（接受当前页码和跳过多少条数据两参数）',\n    类型: 'Function',\n    默认值: ''\n  },\n  { 属性: 'perPage', 说明: '每页展示多少条数据', 类型: 'number', 默认值: '10' },\n  { 属性: 'totalData', 说明: '总数据', 类型: 'number', 默认值: '' },\n  { 属性: 'loading', 说明: '处于加载中', 类型: 'boolean', 默认值: 'false' }\n];\nconst TitleData: TableData = {\n  header: ['属性', '说明', '类型', '默认值'],\n  body: TitleBody\n};\n\nexport const ApiIntro: React.FC = () => {\n  return (\n    <div className=\"interface\">\n      <Title level={4}>Table</Title>\n      <Table data={TextData} />\n      <Title level={4}>AsyncTable</Title>\n      <Table data={TitleData} />\n    </div>\n  );\n};\n","import { translate } from '../translate';\n\nconst createData = () => {\n  const data = [];\n  for (let i = 0; i < 10000; i++) {\n    data.push({ 姓名: '李四', 年龄: i, 班级: 400, 身高: 175, 体重: 99 });\n  }\n  return data;\n};\nconst allData: string[] = [];\nconst res = {\n  status: 200,\n  data: allData.slice(0, 0 + 0),\n  total: allData.length\n};\n\nexport const code = translate(`\nimport { AsyncTable, Table, Tag } from 'uix-react';\\n\nconst dataBody = [\n  { 姓名: '张三', 年龄: 1, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 2, 班级: 335, 身高: 175, 体重: '' },\n  { 姓名: '张三', 年龄: <Tag color=\"red\">999</Tag>, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 4, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 5, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: <Tag color=\"yellow\">777</Tag>, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 7, 班级: 335, 身高: <Tag color=\"green\">体重</Tag>, 体重: 99 },\n  { 姓名: '张三', 年龄: 8, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 9, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 10, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 11, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 12, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 13, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 14, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 15, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 16, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 17, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 18, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 19, 班级: 335, 身高: 175, 体重: 99 },\n  { 姓名: '张三', 年龄: 20, 班级: 335, 身高: 175, 体重: 99 }\n];\nconst createData = () => {\n  const data = [];\n  for (let i = 0; i < 10000; i++) {\n    data.push({ 姓名: '李四', 年龄: i, 班级: 400, 身高: 175, 体重: 99 });\n  }\n  return data;\n};\nconst data: TableData = {\n  header: ['姓名', '年龄', '班级', '身高', '体重'],\n  body: dataBody,\n  footer: { title: '总计', result: dataBody.length.toString() }\n};\nconst data2: TableData = {\n  header: ['姓名', '年龄', '班级', '身高', '体重'],\n  body: dataBody\n};\nconst data3: TableData = {\n  header: ['姓名', '年龄', '班级', '身高', '体重'],\n  body: createData(),\n  footer: { title: '总计', result: \\`${createData().length.toString()} 条数据\\` }\n};\n\nconst allData = createData();\n// 模拟数据请求\nconst ajax = (url: string, offset: number, limit: number) => {\n  return new Promise((resolve) => {\n    if (url === '/data') {\n      setTimeout(() => {\n        resolve({\n          status: 200,\n          data: allData.slice(offset, offset + limit),\n          total: allData.length\n        });\n      }, 500);\n    }\n  });\n};\n\nexport const App:React.RC=()=>{\n // 总条数\n  const [totalSrc, setTotalData] = useState<number>(0);\n  // 是否加载\n  const [isLoading, setLoading] = useState<boolean>(true);\n  // 数据源\n  const [dataSrc, setData] = useState<TableData>({\n    header: ['姓名', '年龄', '班级', '身高', '体重'],\n    body: [],\n    footer: {\n      title: '总计',\n      result: '0'\n    }\n  });\n  // 函数每次翻页都会执行\n  const fn = (currentPage: number, offset: number) => {\n    setLoading(true);\n    (\n      ajax('/data', offset, 10) as Promise<{\n        status: number;\n        data: { [key: string]: React.ReactNode }[];\n        total: number;\n      }>\n    ).then((res) => {\n      setData((state) => ({\n        ...state,\n        body: res.data,\n        footer: {\n          ...state.footer,\n          result: \\`${res.total.toString()} 条数据\\`\n        }\n      }));\n      setTotalData(res.total);\n      setLoading(false);\n    });\n  };\n  return (\n    <div className=\"Eg\">\n      <Table data={data} pagination statistic />\n      <Table data={data2} />\n      <Table data={data3} pagination goTool moreTool statistic perPage={10} />\n      <AsyncTable\n        loading={isLoading}\n        callback={fn}\n        currentData={dataSrc}\n        totalData={totalSrc}\n        perPage={10} // 与上面的limit一样\n      />\n    </div>\n  );\n}\n`);\n","import React from 'react';\nimport { Intro } from './Intro';\nimport { Demo } from './Demo';\nimport { CodeShow } from '../CodeShow';\nimport { ApiIntro } from './ApiIntro';\nimport '../content.scss';\nimport { Title } from '../../lib';\nimport { code } from './code';\n\nconst Example: React.FC = () => {\n  return (\n    <div className=\"content-wrap\">\n      <h2 className=\"title\">Table 表格</h2>\n      <Intro />\n      <Title level={3}>案例</Title>\n      <Demo />\n      <Title level={3}>代码示例</Title>\n      <CodeShow code={code} />\n      <Title level={3}>接口</Title>\n      <ApiIntro />\n    </div>\n  );\n};\n\nexport default Example;\n","// eslint-disable-next-line no-useless-concat\nexport const translate = (example: string) => '```javascript' + `${example}` + '\\n' + '```';\n"],"names":["marked","highlight","str","lang","language","hljs","value","langPrefix","gfm","CodeShow","code","className","dangerouslySetInnerHTML","__html","breaks","Intro","level","dataBody","姓名","年龄","班级","身高","体重","color","createData","data","i","push","header","body","footer","title","result","length","toString","data2","data3","allData","Demo","useState","totalSrc","setTotalData","isLoading","setLoading","dataSrc","setData","pagination","statistic","goTool","moreTool","perPage","loading","callback","currentPage","offset","url","limit","Promise","resolve","setTimeout","status","slice","total","ajax","then","res","state","currentData","totalData","TextData","属性","说明","类型","默认值","TitleData","ApiIntro","translate","example"],"sourceRoot":""}